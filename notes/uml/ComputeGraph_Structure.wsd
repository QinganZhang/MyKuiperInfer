@startuml ComputeGraph_Structure
' 基础数据结构
class Tensor<T> {
  - data_ : arma:Cube<T>
  - raw_shapes_ : std::vector<uint32_t>
}

class RuntimeAttribute {
  + weight_data : std::vector<char>
  + shape: std::vector<int32_t>
  + type : RuntimeDataType
}
class RuntimeParameter {
  + type : RuntimeParameterType
}

' 核心数据结构RuntimeOperandBase
class RuntimeOperandBase<T> {
  + name : std::string 
  + shapes : std::vector<int32_t>
  + datas : std::vector<std::shared_ptr<Tensor<T>>>
  + type : RuntimeDataType 
} 
RuntimeOperandBase o-- Tensor

class RuntimeOperand {}
RuntimeOperand ..|> RuntimeOperandBase
note left on link : RuntimeOperandBase<float>

' 核心数据结构RuntimeOperatorBase
class RuntimeOperatorBase<T> {
  + forward_index : int32_t
  + has_forward : bool 
  + name : std::string
  + type : std::string
  + layer : std::shared_ptr<Layer<T>>
  + output_names : std::vector<std::string>
  + output_operand : std::shared_ptr<RuntimeOperandBase<T>>
  + output_operators_map : std::map<std::string, std::shared_ptr<RuntimeOperatorBase<T>>>
  + input_operands_map: std::map<std::string, std::shared_ptr<RuntimeOperandBase<T>>>
  + input_operands_seq: std::vector<std::shared_ptr<RuntimeOperandBase<T>>>
  + params : std::map<std::string, std::shared_ptr<RuntimeParameter>>
  + attribute : std::map<std::string, std::shared_ptr<RuntimeAttribute>>
}
RuntimeOperatorBase o-- RuntimeOperandBase
RuntimeOperatorBase o-- RuntimeParameter
RuntimeOperatorBase o-- RuntimeAttribute
RuntimeOperatorBase <-- Layer
RuntimeOperator ..|> RuntimeOperatorBase 
note left on link : RuntimeOperatorBase<float>

note left of RuntimeOperatorBase::output_names
  names of output operators, 当前算子的后继算子名称
end note

note left of RuntimeOperatorBase::output_operand
  the only one output operand
end note 

note left of RuntimeOperatorBase::output_operators_map
  Output operators mapped by output name
  当前算子的后继算子的按名访问
end note 

note left of RuntimeOperatorBase::input_operands_map
   Input operands mapped by provider name
end note 

note left of RuntimeOperatorBase::input_operands_seq
  serveral input operands
end note 


' 核心数据结构RuntimeGraph
class RuntimeGraph {
  - bin_path_ : std::string
  - param_path_ : std::string 
  - graph_ : std::unique_ptr<pnnx::Graph> 
  - graph_state_ : GraphState 
  - input_ops_ : std::vector<std::shared_ptr<RuntimeOperator>> 
  - output_ops_ : std::vector<std::shared_ptr<RuntimeOperator>>
  - operators_ : std::vector<std::shared_ptr<RuntimeOperator>> 
  - Init() : bool
  + Build() : void 
  + Forward(bool) : void 
}
' RuntimeGraph <-- Graph
RuntimeGraph o-- RuntimeOperator

note left of RuntimeGraph::input_ops_ 
  整个图的输入节点，这些节点的input_operands_map都是空的
end note

note left of RuntimeGraph::output_ops_ 
  整个图的输出节点，这些节点的output_names都是空的
end note



' PNNX格式的数据结构
package PNNX {
  class Parameter{ 
    + type : int
  }
  class Attribute{
    + type : int
    + shape : std::vector<int>
  }
  class Operand{
    + type : int
    + shape : std::vector<int>
    + name : std::string
    + params : std::map<std::string, Parameter>
    + producer : Operator*
    + consumers : std::vector<Operator*>
  }
  Operand <-- Operator
  Operand o-- Operator

  note left of Operand::producer 
    产生该Operand的算子
  end note

  note left of Operand::consumers
    使用该Operand的(多个)算子
  end note

  class Operator { 
    + type : std::string
    + name : std::string
    + input : std::vector<Operand*>
    + output : std::vector<Operand*>
    + inputnames : std::vector<std::string>
    + params : std::map<std::string, Parameter>
    + attrs : std::map<std::string, Attribute>
  }
  Operator o-- Parameter
  Operator o-- Attribute 
  Operator o-- Operand

  class Graph {
    + ops : std::vector<Operator*>
    + operands : std::vector<Operand*>
  }
  note right of Graph : pnnx::Graph
  Graph o-- Operator
  Graph o-- Operand 
  RuntimeGraph <-- Graph
}


class Layer{
  + {abstract} Forward() : StatusCode
  + {abstract} Forward(inputs, outputs) : StatusCode
  # layer_name_ : std::string
  # runtime_operator_ : std::weak_ptr<RuntimeOperator>
}
note left of Layer::runtime_operator_
  与该算子对应的节点
end note 


@enduml